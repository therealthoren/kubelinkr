name: Publish
permissions: write-all

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  set-vars:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ github.ref_name }}
    steps:
      - name: set values
        id: gen_version
        run: |
          echo $version | sed 's/v//'
          echo "version=$(echo $version | sed 's/\v//')" >> $GITHUB_OUTPUT
          echo "$version"
      - name: Use the value
        # this sets environment variables for this step
        env:
          version: ${{ steps.gen_version.outputs.version }}
        run: |
          echo "${{ env.version }}"
  publish:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Install Node and NPM
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm
      - name: Replace Vversion
        id: replace_version
        uses: mad9000/actions-find-and-replace-string@5
        with:
          source: ${{ github.ref_name }}
          find: 'v'
          replace: ''
      - name: Install and build and package
        env:
          version_number: ${{ steps.replace_version.outputs.value }}
        run: |
          echo "Version number is $version_number"
          python3 -m pip install setuptools --break-system-packages
          npm install
          npm run postinstall
          npm run build
          npm run package
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
      - name: Upload Release Asset DMG
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          version_number: ${{ steps.replace_version.outputs.value }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./release/build/kubelinkr-${{ env.version_number }}.dmg
          asset_name: kubelinkr-${{ env.version_number }}.dmg
          asset_content_type: application/dmg
      - name: Upload Release Asset ARM-DMG
        id: upload-release-asset-arm64
        uses: actions/upload-release-asset@v1
        env:
          version_number: ${{ steps.replace_version.outputs.value }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./release/build/kubelinkr-${{ env.version_number }}-arm64.dmg
          asset_name: kubelinkr-${{ env.version_number }}-arm64.dmg
          asset_content_type: application/dmg

